require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
describe TargetImagesController do

  # This should return the minimal set of attributes required to create a valid
  # TargetImage. As you add validations to TargetImage, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { FactoryGirl.attributes_for(:target_image) }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # TargetImagesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  let(:user) { FactoryGirl.create(:user) }
  before do
    Resque.stub(:enqueue).and_return nil
    sign_in user
  end

  describe "GET index" do
    it "assigns all target_images as @target_images" do
      target_image = FactoryGirl.create(:target_image_nofile)
      get :index, {}, valid_session
      assigns(:target_images).should eq([target_image])
    end
  end

  describe "GET show" do
    it "assigns the requested target_image as @target_image" do
      target_image = FactoryGirl.create(:target_image_nofile)
      get :show, {id: target_image.to_param}, valid_session
      assigns(:target_image).should eq(target_image)
    end

    describe "with an already extracted model" do
      it "assigns the face-feature json as @face_feature" do
        FactoryGirl.create(:feature_test1)
        target_image = TargetImage.first

        get :show, {id: target_image.to_param}, valid_session
        assigns(:target_image).feature.face.should eq('[{"zero value": 0}]')
      end
    end

    describe "with a NOT extracted model" do
      it "assigns the face-feature json as @face_feature" do
        target_image = FactoryGirl.create(:target_image_nofile)

        get :show, {id: target_image.to_param}, valid_session
        expect(assigns(:target_image).feature).to eq(nil)
      end
    end
  end

  describe "GET new" do
    it "assigns a new target_image as @target_image" do
      get :new, {}, valid_session
      assigns(:target_image).should be_a_new(TargetImage)
    end
  end

  describe "GET edit" do
    it "assigns the requested target_image as @target_image" do
      target_image = TargetImage.create! valid_attributes
      get :edit, {id: target_image.to_param}, valid_session
      assigns(:target_image).should eq(target_image)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new TargetImage" do
        expect {
          post :create, {target_image: valid_attributes}, valid_session
        }.to change(TargetImage, :count).by(1)
      end

      it "assigns a newly created target_image as @target_image" do
        post :create, {target_image: valid_attributes}, valid_session

        assigns(:target_image).should be_a(TargetImage)
        assigns(:target_image).should be_persisted
      end

      it "redirects to the created target_image" do
        post :create, {target_image: valid_attributes}, valid_session
        response.should redirect_to('/users/show_target_images')
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved target_image as @target_image" do
        # Trigger the behavior that occurs when invalid params are submitted
        TargetImage.any_instance.stub(:save).and_return(false)
        post :create, { target_image: { data: nil }}, valid_session
        assigns(:target_image).should be_a_new(TargetImage)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        TargetImage.any_instance.stub(:save).and_return(false)
        post :create, { target_image: { data: nil }}, valid_session
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    before :each do
      @updated_attributes = { 'data' => fixture_file_upload('files/madoka.png') }
    end

    describe "with valid params" do
      it "updates the requested target_image" do
        target_image = TargetImage.create! valid_attributes

        # mocha gemとrspecが競合してany_instanceが動かないため、
        # TargetImage.any_instanceではなくexpect_any_instance_ofを使う
        expect_any_instance_of(TargetImage).to receive(:update).with(@updated_attributes)
        put :update, { id: target_image.id, target_image: @updated_attributes }, valid_session
      end

      it "assigns the requested target_image as @target_image" do
        target_image = TargetImage.create! valid_attributes
        put :update, {:id => target_image.to_param, :target_image => valid_attributes}, valid_session
        assigns(:target_image).should eq(target_image)
      end

      it "redirects to the target_image" do
        target_image = TargetImage.create! valid_attributes
        put :update, {:id => target_image.to_param, :target_image => valid_attributes}, valid_session

        response.should redirect_to('/users/show_target_images')
      end
    end

    describe "with invalid params" do
      it "assigns the target_image as @target_image" do
        target_image = TargetImage.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TargetImage.any_instance.stub(:save).and_return(false)
        put :update, {:id => target_image.to_param, :target_image => { data: nil }}, valid_session
        assigns(:target_image).should eq(target_image)
      end

      it "re-renders the 'edit' template" do
        target_image = TargetImage.create! valid_attributes
        # Trigger the behavior that occurs when invalid params are submitted
        TargetImage.any_instance.stub(:save).and_return(false)
        put :update, {:id => target_image.to_param, :target_image => { data: nil }}, valid_session
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested target_image" do
      target_image = FactoryGirl.create(:target_image_nofile)
      expect {
        delete :destroy, {:id => target_image.to_param}, valid_session
      }.to change(TargetImage, :count).by(-1)
    end

    it "redirects to the target_images list" do
      target_image = FactoryGirl.create(:target_image_nofile)
      delete :destroy, {:id => target_image.to_param}, valid_session
      response.should redirect_to(show_target_images_users_path)
    end
  end



  describe "GET prefer" do
    describe "with valid face feature" do
      it "returns preferred images array" do
        FactoryGirl.create(:feature_madoka)
        FactoryGirl.create(:feature_image)

        target_image = TargetImage.first
        get :prefer, {id: target_image.id}, valid_session
        assigns(:preferred).should be_an(Array)
      end

      it "renders the 'prefer' template" do
        face_feature = FactoryGirl.create(:feature_madoka)

        get :prefer, {id: face_feature.featurable_id}, valid_session
        response.should render_template('prefer')
      end

      describe "with resemble image" do
        # 似てる画像を正しく判定する
        it "returns proper preferred images array" do
          face_feature = FactoryGirl.create(:feature_madoka)
          FactoryGirl.create(:feature_madoka1)# 似てる
          FactoryGirl.create(:feature_madoka2)# 似てない
          FactoryGirl.create(:feature_test2)  # 抽出出来てない
          FactoryGirl.create(:image)          # 抽出してない

          get :prefer, {id: face_feature.featurable_id}, valid_session
          assigns(:preferred).count.should eq(1)
        end
      end
    end


    describe "with invalid face feature" do
      # feature.face is []の時
      it "should redirects index when face length is zero" do
        face_feature = FactoryGirl.create(:feature_test2)

        # TargetImage.preferを呼ぶ
        get :prefer, {id: face_feature.featurable_id}, valid_session
        assigns(:message).should eq('Could not get face feature from this image. 抽出できませんでした。')
      end

      # feature is nilの時
      it "should redirects index when feature is nil" do
        target_image = FactoryGirl.create(:target_image_nofile)

        get :prefer, {id: target_image.id}, valid_session
        assigns(:message).should eq('Not extracted yet. まだ抽出されていません。')
      end
    end

  end


  describe "show_delivered action" do
    it "assigns delivered_images" do
      #target_image = FactoryGirl.create(:image_with_delivered_images, images_count: 5)
      #get :show_delivered, { id: target_image.to_param }, valid_session

      #expect(assigns(:delivered_images).count).to eq(target_image.delivered_images.count)
    end
  end

  describe "switch action" do
    before(:each) do
      request.env['HTTP_REFERER'] = '/'
    end
    it "Set 'enabled' attribute to false when it's true" do
      target_image = FactoryGirl.create(:target_image_enabled)

      expect_any_instance_of(TargetImage).to receive(:update_attributes).with({enabled: false})
      get :switch, { id: target_image.id }, valid_session
    end
    it "Set 'enabled' attribute to true when it's false" do
      target_image = FactoryGirl.create(:target_image_nofile)

      expect_any_instance_of(TargetImage).to receive(:update_attributes).with({enabled: true})
      get :switch, { id: target_image.to_param }, valid_session
    end
  end
end
