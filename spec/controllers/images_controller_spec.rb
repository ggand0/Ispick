require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe ImagesController do

  # This should return the minimal set of attributes required to create a valid
  # Image. As you add validations to Image, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "title" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # ImagesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  describe "GET index" do
    it "assigns all images as @images" do
      image = Image.create! valid_attributes
      get :index, {}, valid_session
      expect(assigns(:images)).to eq([image])
    end
  end

  describe "GET show" do
    it "assigns the requested image as @image" do
      image = Image.create! valid_attributes
      get :show, {id: image.to_param}, valid_session
      expect(assigns(:image)).to eq(image)
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested image" do
      image = Image.create! valid_attributes
      expect {
        delete :destroy, {:id => image.to_param}, valid_session
      }.to change(Image, :count).by(-1)
    end

    it "redirects to the images list" do
      image = Image.create! valid_attributes
      delete :destroy, {:id => image.to_param}, valid_session
      expect(response).to redirect_to(images_url)
    end
  end



  # Adds images to ImageBoard objects
  describe "PUT favor" do
    before do
      login_user
    end
    it "Add image to User.favored_images" do
      image = FactoryGirl.create(:image)
      current_user = User.first

      # Userを作成した段階でImageBoardとお気に入り画像がseedされているので
      # その分を考慮する
      count = current_user.image_boards.first.favored_images.count
      put :favor, {
        id: image.id,
        board: 'Default',
        image: image.as_json,
        render: 'true'
      }, valid_session

      # ImageBoardに１枚追加されているはずである
      expect(current_user.image_boards.first.favored_images.count).to eq(count+1)
      expect(response).to redirect_to boards_users_path
    end

    it "redirects to boards_users_path" do
      favored_image = FactoryGirl.create(:favored_image_with_image)
      put :favor, {
        id: favored_image.image.id,
        board: 'Default',
        image: favored_image.image,
        render: 'true'
      }, valid_session

      expect(response).to redirect_to boards_users_path
    end
  end


  describe "GET search" do
    it "Search and render the right images" do
      #image1 = FactoryGirl.create(:image_with_tags)
      image1 = FactoryGirl.create(:image_file)

      get :search, { query: '鹿目まどか1', page: 1 }
      expect(response).to render_template('search')

      # total count of images is 12, so at page 1, there must be six images
      expect(assigns(:images).count).to eq(1)
      expect(assigns(:images).first).to eq(image1)
    end
  end

end
